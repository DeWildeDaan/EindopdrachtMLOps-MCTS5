# This is a basic workflow to help you get started with Actions

name: MLOps Azure Data Preparing and AI Training

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  workflow_call:
    inputs:
      data_prep:
        description: 'Data preparing'
        type: boolean
        default: true
        required: true
      ai_training:
        description: 'AI Training'
        type: boolean
        required: true
        default: true
      api_creation:
        description: 'API Creation'
        type: boolean
        default: true
        required: true
      process_images:
        description: 'Check to skip the processing of the original Data images'
        type: boolean
        default: true
        required: true
      split_images:
        description: 'Check to skip the Splitting of the Training and Testiing sets'
        type: boolean
        default: true
        required: true
      train_on_local:
        description: 'Check if you want to train on the runnder. Otherwise we train on Azure cloud machine'
        type: boolean
        default: false
        required: true
      create_docker_image:
        description: 'Check if you want to create a docker image of the API.'
        type: boolean
        default: true
        required: true
      azure_deployment:
        description: 'Check if we should deploy the API on Azure.'
        type: boolean
        default: false
        required: true
      run_docker_image:
        description: 'Check if we should run the docker image of the API locally.'
        type: boolean
        default: false
        required: true

  workflow_dispatch:
    branches: [ main, lessonsteps/** ]
    inputs:
      data_prep:
        description: 'Data preparing'
        type: boolean
        required: true
        default: true
      ai_training:
        description: 'AI Training'
        type: boolean
        required: true
        default: true
      api_creation:
        description: 'API Creation'
        type: boolean
        default: true
        required: true
      process_images:
        description: 'Check to skip the processing of the original Data images'
        type: boolean
        default: true
        required: true
      split_images:
        description: 'Check to skip the Splitting of the Training and Testiing sets'
        type: boolean
        default: true
        required: true
      train_on_local:
        description: 'Check if you want to train on the runnder. Otherwise we train on Azure cloud machine'
        type: boolean
        default: false
        required: true
      create_docker_image:
        description: 'Check if you want to create a docker image of the API.'
        type: boolean
        default: true
        required: true
      azure_deployment:
        description: 'Check if we should deploy the API on Azure.'
        type: boolean
        default: false
        required: true
      run_docker_image:
        description: 'Check if we should run the docker image of the API locally.'
        type: boolean
        default: false
        required: true
    

env:
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

  CLIENT_ID: 58e2ae8d-58fd-474f-8206-bbbe312f1aef # Change this !
  TENANT_ID: 4ded4bb1-6bff-42b3-aed7-6a36a503bf7a # Change this !
  WORKSPACE_NAME: eindopracht # Change this !
  RESOURCE_GROUP: mlops-eindopdracht # Change this !
  SUBSCRIPTION_ID: 71f20d4c-af8a-497f-8df3-b8f6f42dd5a4 # Change this !

  CLASSES: infected,uninfected
  TRAIN_SET_NAME: training-set
  TEST_SET_NAME: testing-set
  MODEL_NAME: malaria-cnn

  SCRIPT_FOLDER: scripts

  RANDOM_SEED: 42 # Random values that should be same for all the steps
  IMAGE_SIZE: 100 # Image size that should be same for all the steps

  GIT_SHA: ${{ github.sha }} # Set the SHA to use in the code

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  data-preparing:
    ## Note: Uncomment this if you are activating the previous job called 'dependencies'.
    # needs: [dependencies] # Wait until this job was finished.
    if: ${{ inputs.data_prep }}
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    env:
      DATA_FOLDER: data
      DATASET_VERSION: 'latest'
      TRAIN_TEST_SPLIT_FACTOR: 0.20
      PROCESS_IMAGES: ${{ inputs.process_images }} # Make the pipeline skip processing the images
      SPLIT_IMAGES: ${{ inputs.skip_images }} # Make the pipeline skip splitting the images

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'
      
      - name: 'install requirements'
        run: pip install -r requirements.txt
          
      - name: 'Run data prep script'
        id: dataprep
        run: |
          python steps/01_DataPreparing.py

  ai-training:
    needs: [data-preparing]
    # This will run Always BUT only when the previous job was successful or skipped && the ai_Training flag is set to true.
    if: ${{
        always() &&
        (needs.data-preparing.result == 'success' || needs.data-preparing.result == 'skipped') &&
        inputs.ai_training
      }}
    runs-on: ubuntu-20.04

    env:
      INITIAL_LEARNING_RATE: 0.01
      MAX_EPOCHS: 50
      BATCH_SIZE: 64
      PATIENCE: 11
      OPTIMIZER: adam
      EXPERIMENT_NAME: Malaria-Classification

      ## Compute cluster parts
      AML_COMPUTE_CLUSTER_NAME: daan-cpu-cluster
      AML_COMPUTE_CLUSTER_MIN_NODES: 1
      AML_COMPUTE_CLISTER_MAX_NODES: 4
      AML_COMPUTE_CLUSTER_SKU: STANDARD_D2_V2

      TRAIN_ON_LOCAL: ${{ inputs.train_on_local }} # If you want to train on your local runner, set this to True.

      ## Training environment
      CONDA_DEPENDENCIES_PATH: conda_dependencies.yml
      TRAINING_ENV_NAME: malaria-classification-env-training

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'

      - name: 'install requirements'
        run: pip install -r requirements.txt

      - name: 'Run training script'
        id: aitraining
        run: |
          python steps/02_AITraining.py


  api-creation:
    needs: [data-preparing, ai-training]
    # This will run Always BUT only when the previous two jobs were successful or skipped && the api_creation flag is set to true.
    if: ${{
        always() &&
        (needs.data-preparing.result == 'success' || needs.data-preparing.result == 'skipped') &&
        (needs.ai-training.result == 'success' || needs.ai-training.result == 'skipped') &&
        inputs.api_creation
      }}
    runs-on: ubuntu-20.04

    env:
      DEPLOYMENT_DEPENDENCIES: deployment_environment.yml
      DEPLOYMENT_ENV_NAME: malaria-classification-env-deployment
      SCORE_SERVICE_NAME: malaria-classification-svc
      LOCAL_MODEL_PATH: api/outputs
      AZURE_DEPLOYMENT: ${{ inputs.azure_deployment }}

    steps:
      - uses: actions/checkout@v2
      
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'

      - name: 'install requirements'
        run: pip install -r requirements.txt

      - name: 'Run deployment script'
        id: deployment
        run: |
          python steps/03_Deployment.py

      - name: Upload API Code for Docker
        if: inputs.create_docker_image
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: api

  docker-build-and-push:
    needs: [api-creation]
    # This will run Always BUT only when the previous two jobs were successful or skipped && the create_docker_image flag is set to true.
    if: ${{
        always() &&
        (needs.api-creation.result == 'success') &&
        inputs.create_docker_image
      }}
    runs-on: ubuntu-20.04

    steps:
      - name: Download docker-config artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-config

      - name: Gather Docker Meta Information
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/dewildedaan/eindopdrachtmlops-mcts5
          flavor: latest=true
          # generate Docker tags based on the following events/attributes:
          # The GitHub Branch
          # The GitHub SHA
          # More info: https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
          tags: |
            type=ref,event=branch
            type=sha
      
      # Enter your GITHUB Token here!
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
  
  docker-run-local:
    needs: [docker-build-and-push]
    # This will run Always BUT only when the previous two jobs were successful or skipped && the create_docker_image flag is set to true.
    if: ${{
        always() &&
        (needs.docker-build-and-push.result == 'success' || needs.docker-build-and-push.result == 'skipped') &&
        inputs.run_docker_image
      }}
    runs-on: self-hosted
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Docker Image
        run: |
          docker run -d --name malaria-classification -p 80:80 ghcr.io/dewildedaan/eindopdrachtmlops-mcts5

